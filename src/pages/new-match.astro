---
const prerender = false;
import Layout from "../layouts/Layout.astro";
import ModalWindow from "../components/ModalWindow.astro";
import { actions } from "astro:actions";
import { v4 as uuidv4 } from "uuid";
import { getSession } from "auth-astro/server";

const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect("/login");
}

const { user } = session;

const { data: getGroupsUser, error: groupsError } = await Astro.callAction(
  actions.getMatchInfo,
  {
    userId: user?.id,
  }
);

const basePlayerIndex = uuidv4();
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    <!-- Header Section -->
    <div class="mb-8">
      <div class="flex items-center space-x-3 mb-4">
        <a href="/" class="text-blue-600 hover:text-blue-800 flex items-center space-x-1 transition-colors">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          <span>Back to Home</span>
        </a>
      </div>
      
      <div class="flex items-center space-x-4">
        <div class="flex-shrink-0 h-16 w-16 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center text-white font-bold text-2xl shadow-lg">
          ‚öîÔ∏è
        </div>
        <div>
          <h1 class="text-4xl font-bold text-gray-800 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Record New Match
          </h1>
          <p class="text-gray-600 mt-1">Track your Magic: The Gathering game results</p>
        </div>
      </div>
    </div>

    <form class="space-y-8 max-w-4xl mx-auto">
      <input type="hidden" id="user-id-input" name="userId" value={user?.id} />

      <!-- Match Setup Card -->
      <div class="bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden">
        <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-4">
          <h2 class="text-xl font-semibold flex items-center space-x-2">
            <span>‚öôÔ∏è</span>
            <span>Match Setup</span>
          </h2>
        </div>
        
        <div class="p-6 space-y-6">
          <!-- Group Selection -->
          <div>
            <label class="block text-sm font-semibold text-gray-700 mb-3 flex items-center space-x-2">
              <span>üë•</span>
              <span>Select Group</span>
            </label>
            <select
              name="groupId"
              id="group-list"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors bg-gray-50 focus:bg-white"
            >
              <option value="">Choose your playgroup...</option>
              {
                getGroupsUser &&
                  "success" in getGroupsUser &&
                  getGroupsUser.groups?.map((group) => (
                    <option value={group.id} data-group-id={group.id}>
                      {group.name}
                    </option>
                  ))
              }
            </select>
            <p class="mt-1 text-sm text-gray-500">Select the group this match was played with</p>
          </div>

          <!-- Match Details -->
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <label class="block text-sm font-semibold text-gray-700 mb-3 flex items-center space-x-2">
                <span>üîÑ</span>
                <span>Number of Turns</span>
              </label>
              <input
                type="number"
                name="turns"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors bg-gray-50 focus:bg-white"
                placeholder="How many turns did the game last?"
                min="1"
              />
              <p class="mt-1 text-sm text-gray-500">Total turns played in the match</p>
            </div>

            <div>
              <label class="block text-sm font-semibold text-gray-700 mb-3 flex items-center space-x-2">
                <span>üèÜ</span>
                <span>Winner</span>
              </label>
              <select
                id="winner-select"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors bg-gray-50 focus:bg-white"
                name="winnerId"
              >
                <option value="">Select the winner...</option>
              </select>
              <p class="mt-1 text-sm text-gray-500">Who won this match?</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Players Card -->
      <div class="bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden">
        <div class="bg-gradient-to-r from-green-500 to-teal-500 text-white px-6 py-4">
          <div class="flex items-center justify-between">
            <h2 class="text-xl font-semibold flex items-center space-x-2">
              <span>üë§</span>
              <span>Players & Decks</span>
            </h2>
            <button
              type="button"
              id="add-player"
              class="bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center space-x-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              <span>Add Player</span>
            </button>
          </div>
        </div>

        <div class="p-6">
          <div id="player-list" class="space-y-6">
            <div class="player-item">
              <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                <div class="player-details grid md:grid-cols-3 gap-4" data-player-index={basePlayerIndex}>
                  <!-- Player Selection -->
                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Player</label>
                    <select
                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors player-select"
                      name=`playerList[${basePlayerIndex}][playerId]`
                    >
                      <option value="">Select player...</option>
                    </select>
                  </div>

                  <!-- Deck Selection -->
                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Deck</label>
                    <select
                      name=`playerList[${basePlayerIndex}][deckId]`
                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors player-decks"
                    >
                      <option value="">Select deck...</option>
                    </select>
                  </div>

                  <!-- Commander Tax -->
                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">Commander Tax</label>
                    <div class="flex space-x-2">
                      <input
                        type="number"
                        name=`playerList[${basePlayerIndex}][commanderTax]`
                        class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                        placeholder="Tax amount"
                        min="0"
                      />
                      <button
                        type="button"
                        class="add-kill bg-orange-500 hover:bg-orange-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200"
                        title="Add Kill"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Player Stats (Kills) -->
                <div class="player-stats mt-4 space-y-3"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="flex justify-center pt-6">
        <button
          type="submit"
          class="bg-gradient-to-r from-green-500 to-teal-500 text-white px-6 py-4 text-white px-8 py-4 rounded-lg font-medium text-lg transition-colors duration-200 shadow-sm hover:shadow-md flex items-center space-x-2"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          <span>Record Match</span>
        </button>
      </div>
    </form>
  </div>

  <!-- Enhanced Modal -->
  <ModalWindow>
    <!-- Modal Header -->
    <div class="bg-gradient-to-r from-orange-500 to-amber-500 text-white px-6 py-4">
      <h3 id="modal-title" class="text-xl font-semibold flex items-center space-x-2">
        <span>‚ö†Ô∏è</span>
        <span>Match Creation Failed</span>
      </h3>
    </div>

    <!-- Modal Content -->
    <div class="p-6 bg-white">
      <div class="modal-window-content text-gray-700"></div>
      
      <div class="flex justify-end mt-6">
        <button
          id="close-modal"
          type="button"
          class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center space-x-2"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
          <span>Close</span>
        </button>
      </div>
    </div>
  </ModalWindow>
</Layout>

<script>
  import { actions } from "astro:actions";
  import { v4 as uuidv4 } from "uuid";

  interface Deck {
    id: string;
    name: string;
    userId: string;
  }

  interface MatchInfo {
    success: boolean;
    decks?: Deck[];
    groups?: {
      id: string;
      name: string;
      users?: { id: string; name: string; decks?: Deck[] }[];
    }[];
  }

  interface User {
    id: string;
    name: string;
    decks?: Deck[];
  }

  // Adds reference to close modal button
  const closeModalButton = document.getElementById(
    "close-modal"
  ) as HTMLButtonElement;

  // Adds reference to form submit event
  const form = document.querySelector("form") as HTMLFormElement;

  // Adds reference to add-player button
  const addPlayerButton = document.getElementById(
    "add-player"
  ) as HTMLButtonElement;

  // Adds reference to the group list
  const groupList = document.getElementById("group-list") as HTMLSelectElement;

  const winnerSelect = document.getElementById(
    "winner-select"
  ) as HTMLSelectElement;

  const userIdInput = document.getElementById(
    "user-id-input"
  ) as HTMLInputElement;
  
  const userId = userIdInput.value;
  
  let getMatchInfoBase: MatchInfo | null = null;
  
  let selectedGroup: string | null = null;
  
  let selectedUserDecks = [];

  let usersByGroupGlobal: User[] = [];

  // Part of the logic that fills the player-select elements with the users in a group
  groupList.addEventListener("change", async (event) => {
    const selectedValue = groupList.value;
    selectedGroup = selectedValue;

    const { data: getMatchInfoData, error: getMatchInfoError } =
      await actions.getMatchInfo({
        userId,
      });

    if (getMatchInfoData && "success" in getMatchInfoData) {
      getMatchInfoBase = getMatchInfoData as MatchInfo;
    }

    const { data, error } = await actions.getUsersGroup({
      groupId: selectedValue,
    });

    usersByGroupGlobal = data?.users ?? [];

    if (data) {
      if (data.success) {
        winnerSelect.innerHTML = `
          <option value="">Select a winner</option>
          ${usersByGroupGlobal.map(
            (user) => `<option value="${user.id}">${user.name}</option>`
          )}
        `;

        const allPlayerSelects = document.querySelectorAll(
          ".player-select"
        ) as NodeListOf<HTMLSelectElement>;

        allPlayerSelects.forEach((select) => {
          select.innerHTML = `
            <option value="">Select a player</option>
            ${usersByGroupGlobal.map(
              (user) =>
                `<option value="${user.id}" data-player-id="${user.id}" data-player-name="${user.name}">
                  ${user.name}
                </option>`
            )}
          `;
        });
      } else {
        console.log(data.message);
      }
    }

    if (error) {
      console.error("error block: ", error);
    }
  });

  // Adds reference to the player list
  const playerList = document.getElementById("player-list") as HTMLDivElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const { data, error } = await actions.newMatch(formData);

    if (data) {
      if (data.success) {
        console.log("success block: ", data);

        window.location.href = `/matches`;

      } else {
        console.log(data.error);

        const modalWindow = document.getElementById(
          "modal-window"
        ) as HTMLDivElement;

        const modalWindowContentDiv = modalWindow.querySelector(
          ".modal-window-content"
        ) as HTMLDivElement;

        modalWindowContentDiv.innerHTML = `
        <div class="text-sm text-gray-500">
          <ul class="list-none space-y-1">
            ${data.error ? data.error.map((error) => `<li>${typeof error === "string" ? error : error.message}</li>`).join("") : ""}
          </ul>
        </div>
      `;

        modalWindow.classList.remove("hidden");
      }
    }

    if (error) {
      console.error("error block: ", error);
    }

  });

  // Part of the logic that detects when a player select dropdown is changed and populates that player's decks dynamically
  playerList.addEventListener("change", (event) => {
    const changedEvent = event.target as HTMLSelectElement;

    if (
      changedEvent.tagName === "SELECT" &&
      changedEvent.classList.contains("player-select")
    ) {
      const selectedPlayerValue = changedEvent.value;

      //This is the shared space for the two select menus
      const changedEventParent = changedEvent.parentElement
        ?.parentElement as HTMLElement;

      const decksBySelectedUser = changedEventParent.querySelector(
        ".player-decks"
      ) as HTMLSelectElement;

      selectedUserDecks =
        getMatchInfoBase?.groups
          ?.find((group) => group.id === selectedGroup)
          ?.users?.find((user) => user.id === selectedPlayerValue)?.decks ?? [];

      decksBySelectedUser.innerHTML = `
        <option value="">Select a deck</option>
        ${selectedUserDecks
          .map(
            (deck) => `
          <option value="${deck.id}">${deck.name}</option>
        `
          )
          .join("")}
      `;
    }
  });

  // Part of the logic that adds a new kill item
  playerList.addEventListener("click", (event) => {
    // add-kill button
    const target = event.target as HTMLElement | null;
    const clickedEvent = target?.closest("button") as HTMLButtonElement | null;

    if (clickedEvent && clickedEvent.classList.contains("add-kill")) {
      // Find the player-details div that contains the data-player-index
      const playerDetailsDiv = clickedEvent.closest(".player-details") as HTMLDivElement;
      const clickedPlayerIndex = playerDetailsDiv?.getAttribute("data-player-index") ?? "0";
      
      // Find the player-stats section which is a sibling of player-details
      const clickedEventStats = playerDetailsDiv?.parentElement?.querySelector(".player-stats") as HTMLDivElement;

      const randomIndex = uuidv4();

      const newItem = document.createElement("div");
      newItem.setAttribute("class", "bg-white rounded-lg p-3 border border-gray-200 player-kill-item");
      newItem.innerHTML = `
      <div class="grid md:grid-cols-3 gap-3 items-end">
        <div>
          <label class="block text-sm font-semibold text-gray-700 mb-1">Opponent Eliminated</label>
          <select name="playerList[${clickedPlayerIndex}][${randomIndex}][opponentId]" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm player-select">
              <option value="">Select opponent...</option>
              ${usersByGroupGlobal.map(
                (user) =>
                  `<option value="${user.id}" data-player-id="${user.id}" data-player-name="${user.name}">
                    ${user.name}
                  </option>`
              )}
          </select>
        </div>

        <div>
          <label class="block text-sm font-semibold text-gray-700 mb-1">Commander Damage?</label>
          <select name="playerList[${clickedPlayerIndex}][${randomIndex}][commanderDamage]" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm">
              <option value="false">No</option>
              <option value="true">Yes</option>
          </select>
        </div>

        <div class="flex justify-end">
          <button
            type="button"
            class="delete-kill bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200"
            title="Remove Kill"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
      </div>
      `;

      clickedEventStats.appendChild(newItem);
    }

    if (clickedEvent && clickedEvent.classList.contains("delete-kill")) {
      // Find the kill item container (with class player-kill-item) and remove it
      const killItem = clickedEvent.closest(".player-kill-item");
      killItem?.remove();
    }

    if (clickedEvent && clickedEvent.classList.contains("delete-player")) {
      // Find the player item container (with class player-item) and remove it
      const playerItem = clickedEvent.closest(".player-item");
      playerItem?.remove();
    }
  });

  // Part of the logic that detects when a new player is added
  addPlayerButton.addEventListener("click", () => {
    const newPlayerIndex = uuidv4();

    const playerStatsDiv = document.getElementById(
      "player-list"
    ) as HTMLElement;

      const newRow = document.createElement("div");
    newRow.setAttribute("class", "player-item");

    const newRowBase = `
    <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
      <div class="player-details grid md:grid-cols-3 gap-4" data-player-index="${newPlayerIndex}">
        <!-- Player Selection -->
        <div>
          <label class="block text-sm font-semibold text-gray-700 mb-2">Player</label>
          <select
            name="playerList[${newPlayerIndex}][playerId]"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors player-select"
          >
            <option value="">Select player...</option>
            ${usersByGroupGlobal?.map(
              (user) =>
                `<option value="${user.id}" data-player-id="${user.id}" data-player-name="${user.name}">${user.name}</option>`
            )}
          </select>
        </div>

        <!-- Deck Selection -->
        <div>
          <label class="block text-sm font-semibold text-gray-700 mb-2">Deck</label>
          <select
            name="playerList[${newPlayerIndex}][deckId]"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors player-decks"
          >
            <option value="">Select deck...</option>
          </select>
        </div>

        <!-- Commander Tax -->
        <div>
          <label class="block text-sm font-semibold text-gray-700 mb-2">Commander Tax</label>
          <div class="flex space-x-2">
            <input
              name="playerList[${newPlayerIndex}][commanderTax]"
              type="number"
              class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
              placeholder="Tax amount"
              min="0"
            />
            <button
              type="button"
              class="add-kill bg-orange-500 hover:bg-orange-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200"
              title="Add Kill"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
            </button>
            <button
              type="button"
              class="delete-player bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors duration-200"
              title="Remove Player"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Player Stats (Kills) -->
      <div class="player-stats mt-4 space-y-3"></div>
    </div>
    `;    newRow.innerHTML = newRowBase;

    playerStatsDiv.appendChild(newRow);
  });

  closeModalButton.addEventListener("click", () => {
    const modalWindow = document.getElementById(
      "modal-window"
    ) as HTMLDivElement;

    modalWindow.classList.add("hidden");
  });
</script>
