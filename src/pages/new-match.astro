---
import Layout from "../layouts/Layout.astro";
import ModalWindow from "../components/ModalWindow.astro";
import { actions } from "astro:actions";
import { v4 as uuidv4 } from "uuid";
import { getSession } from "auth-astro/server";

const session = await getSession(Astro.request);
if (!session) {
  return Astro.redirect("/login");
}

const { user } = session;

const { data: getGroupsUser, error: groupsError } = await Astro.callAction(
  actions.getMatchInfo,
  {
    userId: user?.id,
  }
);

const basePlayerIndex = uuidv4();
---

<Layout>
  <form class="space-y-5 w-3/4 mx-auto">
    <div>
      <input type="hidden" id="user-id-input" name="userId" value={user?.id} />
    </div>

    <div>
      <label class="">Group: </label>
      <select
        name="groupId"
        id="group-list"
        class="text-base px-4 py-2 border rounded-lg focus:outline-none"
      >
        <option value="">Select a group</option>
        {
          getGroupsUser &&
            "success" in getGroupsUser &&
            getGroupsUser.groups?.map((group) => (
              <option value={group.id} data-group-id={group.id}>
                {group.name}
              </option>
            ))
        }
      </select>
    </div>

    <div class="flex justify-between">
      <div class="space-x-4">
        <label for="">Turns: </label>
        <input
          type="number"
          name="turns"
          class="text-base px-4 py-2 border rounded-lg focus:outline-none"
          placeholder="Number of turns"
        />
      </div>

      <div class="flex items-center space-x-4">
        <button
          type="button"
          id="add-player"
          class="disabled:bg-gray-200 bg-orange-500 text-white px-4 py-2 rounded-md disabled:cursor-not-allowed flex justify-center cursor-pointer transition ease-in duration-500"
          >Add Player</button
        >
        <button
          type="submit"
          class="disabled:bg-gray-200 bg-green-500 text-white px-4 py-2 rounded-md disabled:cursor-not-allowed flex justify-center cursor-pointer transition ease-in duration-500"
          >Submit</button
        >
      </div>
    </div>

    <div class="space-x-4">
      <label for="">Winner: </label>
      <select
        id="winner-select"
        class="text-base px-4 py-2 border rounded-lg focus:outline-none"
        name="winnerId"
      >
        <option value="">Select a winner</option>
      </select>
    </div>

    <div id="player-list" class="space-y-5">
      <div class="player-item space-y-4">
        <hr class="my-8" />
        <div
          class="player-details space-x-4 flex"
          data-player-index={basePlayerIndex}
        >
          <div>
            <label for="">Player: </label>
            <select
              class="text-base px-4 py-2 border rounded-lg focus:outline-none player-select"
              name=`playerList[${basePlayerIndex}][playerId]`
            >
              <option value="">Select a player</option>
            </select>
          </div>

          <div>
            <label for="">Deck: </label>
            <select
              name=`playerList[${basePlayerIndex}][deckId]`
              class="text-base px-4 py-2 border rounded-lg focus:outline-none player-decks"
            >
              <option value="">Select a deck</option>
            </select>
          </div>

          <div>
            <label for="">Commander Tax: </label>
            <input
              type="number"
              name=`playerList[${basePlayerIndex}][commanderTax]`
              class="text-base px-4 py-2 border rounded-lg focus:outline-none"
              placeholder="Tax"
            />
          </div>

          <button
            type="button"
            id=""
            class="add-kill ml-4 disabled:bg-gray-200 disabled:cursor-not-allowed justify-center cursor-pointer transition ease-in duration-500"
            >Add kill</button
          >
        </div>
        <div class="player-stats space-y-4"></div>
      </div>
    </div>
  </form>

  <ModalWindow>
    <div>
      <h3 id="modal-title" class="text-2xl">New match not created</h3>
      <div class="modal-window-content"></div>
    </div>
    <div>
      <button
        id="close-modal"
        type="button"
        class="bg-black text-white rounded-lg px-5 py-2.5">Close</button
      >
    </div>
  </ModalWindow>
</Layout>

<script>
  import { actions } from "astro:actions";
  import { v4 as uuidv4 } from "uuid";

  interface Deck {
    id: string;
    name: string;
    userId: string;
  }

  interface MatchInfo {
    success: boolean;
    decks?: Deck[];
    groups?: {
      id: string;
      name: string;
      users?: { id: string; name: string; decks?: Deck[] }[];
    }[];
  }

  interface User {
    id: string;
    name: string;
    decks?: Deck[];
  }

  // Adds reference to close modal button
  const closeModalButton = document.getElementById(
    "close-modal"
  ) as HTMLButtonElement;

  // Adds reference to form submit event
  const form = document.querySelector("form") as HTMLFormElement;

  // Adds reference to add-player button
  const addPlayerButton = document.getElementById(
    "add-player"
  ) as HTMLButtonElement;

  // Adds reference to the group list
  const groupList = document.getElementById("group-list") as HTMLSelectElement;

  const winnerSelect = document.getElementById(
    "winner-select"
  ) as HTMLSelectElement;

  const userIdInput = document.getElementById(
    "user-id-input"
  ) as HTMLInputElement;
  
  const userId = userIdInput.value;
  
  let getMatchInfoBase: MatchInfo | null = null;
  
  let selectedGroup: string | null = null;
  
  let selectedUserDecks = [];

  let usersByGroupGlobal: User[] = [];

  // Part of the logic that fills the player-select elements with the users in a group
  groupList.addEventListener("change", async (event) => {
    const selectedValue = groupList.value;
    selectedGroup = selectedValue;

    const { data: getMatchInfoData, error: getMatchInfoError } =
      await actions.getMatchInfo({
        userId,
      });

    if (getMatchInfoData && "success" in getMatchInfoData) {
      getMatchInfoBase = getMatchInfoData as MatchInfo;
    }

    const { data, error } = await actions.getUsersGroup({
      groupId: selectedValue,
    });

    usersByGroupGlobal = data?.users ?? [];

    if (data) {
      if (data.success) {
        winnerSelect.innerHTML = `
          <option value="">Select a winner</option>
          ${usersByGroupGlobal.map(
            (user) => `<option value="${user.id}">${user.name}</option>`
          )}
        `;

        const allPlayerSelects = document.querySelectorAll(
          ".player-select"
        ) as NodeListOf<HTMLSelectElement>;

        allPlayerSelects.forEach((select) => {
          select.innerHTML = `
            <option value="">Select a player</option>
            ${usersByGroupGlobal.map(
              (user) =>
                `<option value="${user.id}" data-player-id="${user.id}" data-player-name="${user.name}">
                  ${user.name}
                </option>`
            )}
          `;
        });
      } else {
        console.log(data.message);
      }
    }

    if (error) {
      console.error("error block: ", error);
    }
  });

  // Adds reference to the player list
  const playerList = document.getElementById("player-list") as HTMLDivElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const { data, error } = await actions.newMatch(formData);

    if (data) {
      if (data.success) {
        console.log("success block: ", data);

        window.location.href = `/matches`;

      } else {
        console.log(data.error);

        const modalWindow = document.getElementById(
          "modal-window"
        ) as HTMLDivElement;

        const modalWindowContentDiv = modalWindow.querySelector(
          ".modal-window-content"
        ) as HTMLDivElement;

        modalWindowContentDiv.innerHTML = `
        <div class="text-sm text-gray-500">
          <ul>
            ${data.error ? data.error.map((error) => `<li>${typeof error === "string" ? error : error.message}</li>`).join("") : ""}
          </ul>
        </div>
      `;

        modalWindow.classList.remove("hidden");
      }
    }

    if (error) {
      console.error("error block: ", error);
    }

  });

  // Part of the logic that detects when a player select dropdown is changed and populates that player's decks dynamically
  playerList.addEventListener("change", (event) => {
    const changedEvent = event.target as HTMLSelectElement;

    if (
      changedEvent.tagName === "SELECT" &&
      changedEvent.classList.contains("player-select")
    ) {
      const selectedPlayerValue = changedEvent.value;

      //This is the shared space for the two select menus
      const changedEventParent = changedEvent.parentElement
        ?.parentElement as HTMLElement;

      const decksBySelectedUser = changedEventParent.querySelector(
        ".player-decks"
      ) as HTMLSelectElement;

      selectedUserDecks =
        getMatchInfoBase?.groups
          ?.find((group) => group.id === selectedGroup)
          ?.users?.find((user) => user.id === selectedPlayerValue)?.decks ?? [];

      decksBySelectedUser.innerHTML = `
        <option value="">Select a deck</option>
        ${selectedUserDecks
          .map(
            (deck) => `
          <option value="${deck.id}">${deck.name}</option>
        `
          )
          .join("")}
      `;
    }
  });

  // Part of the logic that adds a new kill item
  playerList.addEventListener("click", (event) => {
    // add-kill button
    const target = event.target as HTMLElement | null;
    const clickedEvent = target?.closest("button") as HTMLButtonElement | null;

    if (clickedEvent && clickedEvent.classList.contains("add-kill")) {
      // player stats section
      const clickedEventStats = clickedEvent.parentElement
        ?.nextElementSibling as HTMLDivElement;

      const clickedEventKills =
        clickedEventStats.querySelectorAll(".player-kill-item");

      const clickedPlayerIndex =
        clickedEvent.parentElement?.getAttribute("data-player-index") ?? "0";

      const randomIndex = uuidv4();

      const newItem = document.createElement("div");
      newItem.setAttribute("class", "flex space-x-4 player-kill-item");
      newItem.innerHTML = `
      <div class="space-x-4">
        <label> Opponent: </label>
        <select name="playerList[${clickedPlayerIndex}][${randomIndex}][opponentId]" class="text-base px-4 py-2 border rounded-lg focus:outline-none player-select">
            <option value="">Select a player</option>
            ${usersByGroupGlobal.map(
              (user) =>
                `<option value="${user.id}" data-player-id="${user.id}" data-player-name="${user.name}">
                  ${user.name}
                </option>`
            )}
        </select>
      </div>


    <div class="space-x-4 flex items-center">
      <label for="commander-damage">Commander damage:</label>
        <select name="playerList[${clickedPlayerIndex}][${randomIndex}][commanderDamage]" class="text-base px-4 py-2 border rounded-lg focus:outline-none player-select">
            <option value="false">
              False
            </option>
            <option value="true">
              True
            </option>
        </select>
    </div>

    <div class="flex items-center cursor-pointer">
      <button class="delete-kill">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10v7m-4-7v7M6 6v11.8c0 1.12 0 1.68.218 2.108a2 2 0 0 0 .874.874c.427.218.987.218 2.105.218h5.606c1.118 0 1.677 0 2.104-.218c.377-.192.683-.498.875-.874c.218-.428.218-.987.218-2.105V6M6 6h2M6 6H4m4 0h8M8 6c0-.932 0-1.398.152-1.765a2 2 0 0 1 1.082-1.083C9.602 3 10.068 3 11 3h2c.932 0 1.398 0 1.765.152a2 2 0 0 1 1.083 1.083C16 4.602 16 5.068 16 6m0 0h2m0 0h2"/></svg>
      </button>
    </div>
    `;

      clickedEventStats.appendChild(newItem);
    }

    if (clickedEvent && clickedEvent.classList.contains("delete-kill")) {
      clickedEvent.parentElement?.parentElement?.remove();
    }

    if (clickedEvent && clickedEvent.classList.contains("delete-player")) {
      clickedEvent.parentElement?.parentElement?.parentElement?.remove();
    }
  });

  // Part of the logic that detects when a new player is added
  addPlayerButton.addEventListener("click", () => {
    const newPlayerIndex = uuidv4();

    const playerStatsDiv = document.getElementById(
      "player-list"
    ) as HTMLElement;

    const newRow = document.createElement("div");
    newRow.setAttribute("class", "player-item space-y-4");

    const newRowBase = `
    <hr class="my-8" />
    <div
      class="player-details space-x-4 flex"
      data-player-index="${newPlayerIndex}"
    >
      <div>
        <label> Player: </label>
        <select
          name="playerList[${newPlayerIndex}][playerId]"
          class="text-base px-4 py-2 border rounded-lg focus:outline-none player-select"
        >
                    ${usersByGroupGlobal?.map(
                      (user) =>
                        `<option value="${user.id}" data-player-id="${user.id}" data-player-name="${user.name}">
                ${user.name}
              </option>`
                    )}
        </select>
      </div>

      <div>
        <label for="">Deck: </label>
        <select
          name="playerList[${newPlayerIndex}][deckId]"
          class="text-base px-4 py-2 border rounded-lg focus:outline-none player-decks"
        >
          <option value="">Select a deck</option>
        </select>
      </div>

      <div>
        <label for="">Commander Tax: </label>
        <input
          name="playerList[${newPlayerIndex}][commanderTax]"
          type="number"
          class="text-base px-4 py-2 border rounded-lg focus:outline-none"
          placeholder="Tax"
        />
      </div>

      <button
        type="button"
        id=""
        class="add-kill ml-4 disabled:bg-gray-200 disabled:cursor-not-allowed justify-center cursor-pointer transition ease-in duration-500"
      >
        Add kill
      </button>

      <div class="flex items-center cursor-pointer">
      <button class="delete-player">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10v7m-4-7v7M6 6v11.8c0 1.12 0 1.68.218 2.108a2 2 0 0 0 .874.874c.427.218.987.218 2.105.218h5.606c1.118 0 1.677 0 2.104-.218c.377-.192.683-.498.875-.874c.218-.428.218-.987.218-2.105V6M6 6h2M6 6H4m4 0h8M8 6c0-.932 0-1.398.152-1.765a2 2 0 0 1 1.082-1.083C9.602 3 10.068 3 11 3h2c.932 0 1.398 0 1.765.152a2 2 0 0 1 1.083 1.083C16 4.602 16 5.068 16 6m0 0h2m0 0h2"/></svg>
      </button>
      </div>
    </div>
    <div class="player-stats space-y-4"></div>
    `;

    newRow.innerHTML = newRowBase;

    playerStatsDiv.appendChild(newRow);
  });

  closeModalButton.addEventListener("click", () => {
    const modalWindow = document.getElementById(
      "modal-window"
    ) as HTMLDivElement;

    modalWindow.classList.add("hidden");
  });
</script>
